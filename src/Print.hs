{-# LANGUAGE OverloadedStrings #-}

module Print (
  prettyPrint
) where

import           Control.Monad (liftM)
import qualified Data.Text.Lazy as T
import           Data.Text.Lazy (Text)
import           Text.Printf (printf)

import           Template (template)
import           Parser.Parser (doParse)
import qualified Element as E

prettyPrint :: String -> String -> String
prettyPrint j r = T.unpack $ T.unlines $ flip map tmpl $ \t -> 
                    case t of
                      "$body$" -> body
                      otherwise -> t
  where
    hder = "% automatically generated by obtuse-parakeet"
    tmpl = hder : map (T.filter (/= '\r')) (T.lines template)
    body = T.concat $ map E.texify (doParse j r)
